[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "How to Use GitHub: A 5-Minute Tutorial",
    "section": "",
    "text": "1. Sign up to GitHub\n\nIf you haven’t already, you may sign up to GitHub here.\n\n\n\n\n\n\nNote:\n\n\n– If you’ve never used Markdown before, it’s a plain text format with simple symbols that allow other software to interpret the structure—like headings, lists, or links. It’s easy to learn and especially useful when working with GitHub. Check out the basic syntax, which covers the most common use cases.\n\n\n\n\n2. Create a new repository\n\nNow, create a new repository.\n\n\n\n\n\nProvide the necessary information to set up your repository.\n\n\n\n\n\nDone.\n\n\n\n\n\n\nNote:\n\n\n\nThere’s nothing fancy about a repository—you may simply think of it as a folder.\nI usually go with GPL 2.0. You may read about open-source licenses and choose one that suits your needs. GitHub also provides a list of licenses you can choose from when creating a repository.\n\n\n\n\n\n3. Edit the README file\n\nClick the pencil button to edit.\n\n\n\n\n\nMake your edits and then commit.\n\n\n\n\n\n\n\n\nDone.\n\n\n\n\n\n\n4. Create a new file\n\nCreate a new file in the repository.\n\n\n\n\n\nMake your edits and then commit.\n\n\n\n\n\n\n\n\nDone.\n\n\n\n\n\n\n5. Upload files\n\nUpload files to the repository.\n\n\n\n\n\nDrag and drop your files, then commit.\n\n\n\n\n\nDone.\n\n\n\n\n\n\n6. Add link to your website\n\nIn some cases, you might have a separate website for your repository. Click the gear icon to add the link.\n\n\n\n\n\n\n\n\n\n\n\n\nNote:\n\n\n\nIf you’re interested in how to create a website using GitHub, you may check out this tutorial.\n\n\n\n\n\n7. Create a release\n\nAt some point, you might want to archive and release a specific version of your repository. Click the “Create a new release” button.\n\n\n\n\n\nCreate a new tag.\n\n\n\n\n\nEnter the title and description, upload relevant files (if any), and publish.\n\n\n\n\n\nDone.\n\n\n\n\n\n\n\n\n\n8. Using command line\n\nIf you’re a more advanced user, you might prefer using the command line to pull the repository to your local machine, make changes, and then push them back to GitHub.\nYou’ll need to set up SSH access for your GitHub account. You may check out this tool and tutorial.\nAssuming you’ve already created a repository (see Step 2), find the SSH URL for your repository.\n\n\n\n\n\nCreate a folder on your local machine (replace test with your desired folder name):\n\n\nmkdir -p ./test/ && cd ./test/\"\n\n\nInitialize the folder (replace git@github.com:chenh19/test.git with your SSH URL):\n\n\ngit init && git remote add origin git@github.com:chenh19/test.git\n\n\nPull your repository (replace git@github.com:chenh19/test.git with your SSH URL):\n\n\ngit pull git@github.com:chenh19/test.git\n\n\nMake your edits locally.\nPush to your GitHub:\n\n\ngit add --all && git commit -a -m \"update\" && git push -u origin main\n\n\n\nNote:\n\n\n\nThis tutorial is intended for beginners and doesn’t cover concepts like “branches,” “pull requests,” and etc. For more advanced or collaborative development, you may want to learn about workflows for merging branches.\n\n\n\n\n\n9. Repository settings\n\nYou might want to change the repository’s visibility, transfer ownership, or delete it. You can find these options under the “Settings” tab.\n\n\n\n\n\n\n\n\n\n10. End\n\nNow you’ve learned the basics of how to use GitHub. Good luck and happy developing!"
  }
]